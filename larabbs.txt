准备工作
安装CentOS，lnmp1.6



为 GitHub 账号设置 SSH Key
	主机上生成SSH KEY：ssh-keygen -t rsa -C "your_email@example.com"
	查看SSH KEY文件：ls -al ~/.ssh
		id_rsa —— SSH 秘钥的 私钥 (Private Key)
		id_rsa.pub —— SSH 秘钥的 公钥 (Public Key)
	将 SSH Key 添加到 ssh-agent 中：
		eval "$(ssh-agent -s)"
		ssh-add ~/.ssh/id_rsa
	打印出公钥 id_rsa.pub 文件里的内容，并把输出的内容复制到GitHub

创建 weibo 应用
	更改composer国内镜像源：composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
	进入/home/wwwroot/目录下，安装laravel项目：composer create-project laravel/laravel weibo --prefer-dist "6.*"

	改时区 config/app.php,'timezone' => 'PRC'

修改.env文件
	APP_NAME=Weibo
	APP_ENV=local
	APP_KEY=base64:dIAK2B7exLbY2S54RFQdI3c6vg9/qIWWjYy5M4ESa4A=
	APP_DEBUG=true
	APP_URL=http://weibo.test
	.
	.
	DB_DATABASE=weibo
	DB_USERNAME=homestead
	DB_PASSWORD=secret
	.

Git 代码版本控制
	$ git init
	$ git add -A
	$ git commit -m "Initial commit"
	在 GitHub 上新建一个名为 weibo 的项目,并将代码推送上去
		$ git remote add origin git@github.com:<username>/weibo.git
		$ git push -u origin master

创建静态页面
	 Git 来新建一个 static-pages 分支
	 	$ git checkout master	代表将当前分支切换到 master 分支上
		$ git checkout -b static-pages	创建一个名为 static-pages 的新分支

	配置路由文件web.php
		Route::get('/', 'StaticPagesController@home');
		Route::get('/help', 'StaticPagesController@help');
		Route::get('/about', 'StaticPagesController@about');

	生成静态页面控制器
		php artisan make:controller StaticPagesController	使用 驼峰式大小写 和复数形式来命名

Blade 模板的继承
	父视图(layouts/default.blade.php)占位符：@yield('content')
	子视图继承父视图
		@extends('layouts.default')
		@section('content')
  			内容
		@stop

	当 @section 传递了第二个参数时，便不需要再通过 @stop 标识来告诉 Laravel 填充区块会在具体哪个位置结束
		父视图：<title>@yield('title', 'Weibo App')</title>
		子视图：@section('title', '关于')

Artisan命令
	php artisan key:generate	生成 App Key
	php artisan make:controller	生成控制器
	php artisan make:model	生成模型
	php artisan make:policy	生成授权策略
	php artisan make:seeder	生成 Seeder 文件
	php artisan migrate	执行迁移
	php artisan migrate:rollback	回滚迁移
	php artisan migrate:refresh	重置数据库
	php artisan db:seed	填充数据库
	php artisan tinker	进入 tinker 环境
	php artisan route:list	查看路由列表

Laravel 项目中使用 Bootstrap 前端框架
	composer require laravel/ui --dev
	laravel6.X框架使用命令：composer require laravel/ui "1.x" --dev

	安装NPM：
		下载安装包：wget https://npm.taobao.org/mirrors/node/v13.9.0/node-v13.9.0-linux-x64.tar.gz 
		解压并改目录名
			tar -xvf node-v13.9.0-linux-x64.tar.gz 
			mv node-v13.9.0-linux-x64 node
		配置环境变量
			vi /etc/profile
		添加
			export NODE_HOME=/var/local/node
			export PATH=$NODE_HOME/bin:$PATH
		生效配置文件,查看版本
			source /etc/profile
			node -v
			npm -v

	安装yarn：
		下载安装包：wget https://github.com/yarnpkg/yarn/releases/download/v1.22.1/yarn-v1.22.1.tar.gz
		解压并改目录名：tar -zxvf yarn-v1.22.1.tar.gz
						mv yarn-v1.22.1 yarn
		配置环境变量
			vi /etc/profile
			export PATH=$PATH:/var/local/yarn/bin
		生效配置文件,查看版本
			source /etc/profile
			yarn -v
	
	设置安装器来使用国内的淘宝镜像加速
		npm config set registry=https://registry.npm.taobao.org
		yarn config set registry 'https://registry.npm.taobao.org'

	用 Yarn 对扩展包进行安装，请在项目根目录下运行以下命令进行安装：
		yarn install --no-bin-links
		yarn add cross-env

	导入 Bootstrap：
		文件resources/sass/app.scss中，只留@import '~bootstrap/scss/bootstrap';

	编译app.scss文件
		npm run watch-poll

	浏览器缓存问题
		文件webpack.mix.js中最后加.version()
		blade文件中
			<link rel="stylesheet" href="{{ mix('css/app.css') }}">

指定命名空间创建模型
	php artisan make:model Models/Article	
	创建模型的同时顺便创建数据库迁移
	php artisan make:model Models/Article -m

进入 Tinker 环境创建对象
	vi /usr/local/php/etc/php.ini，搜索 disable_functions=...，删除其中的exec
	重启php服务：systemctl restart php-fpm
	php artisan tinker
	App\Models\User::create(['name'=> 'candy3721','email'=>'402404932@qq.com','password'=>bcrypt('123456')])

更新用户对象
	第一种是通过给用户对象属性进行赋值，赋值成功后再调用 save 方法进行保存更新；
		$user = User::first()
		$user->name = 'Monkey'
		$user->save()
	第二种则是直接调用 update 方法进行更新
		$user->update(['name'=>'Summer'])

用resource 方法来定义用户资源路由
	Route::resource('users', 'UsersController');
	等同于：
		Route::get('/users', 'UsersController@index')->name('users.index'); 	#显示所有用户列表的页面
		Route::get('/users/create', 'UsersController@create')->name('users.create');	#创建用户的页面
		Route::get('/users/{user}', 'UsersController@show')->name('users.show');	#根据ID显示用户个人信息的页面
		Route::post('/users', 'UsersController@store')->name('users.store');	#创建用户,保存
		Route::get('/users/{user}/edit', 'UsersController@edit')->name('users.edit');	#编辑用户个人资料的页面
		Route::patch('/users/{user}', 'UsersController@update')->name('users.update');	#更新用户，保存
		Route::delete('/users/{user}', 'UsersController@destroy')->name('users.destroy');	#删除用户